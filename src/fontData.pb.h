// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fontData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fontData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fontData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "textureData.pb.h"
#include "glyphData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fontData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fontData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class fontData_proto;
struct fontData_protoDefaultTypeInternal;
extern fontData_protoDefaultTypeInternal _fontData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::fontData_proto* Arena::CreateMaybeMessage<::fontData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class fontData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:fontData_proto) */ {
 public:
  inline fontData_proto() : fontData_proto(nullptr) {}
  ~fontData_proto() override;
  explicit constexpr fontData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fontData_proto(const fontData_proto& from);
  fontData_proto(fontData_proto&& from) noexcept
    : fontData_proto() {
    *this = ::std::move(from);
  }

  inline fontData_proto& operator=(const fontData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline fontData_proto& operator=(fontData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const fontData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const fontData_proto* internal_default_instance() {
    return reinterpret_cast<const fontData_proto*>(
               &_fontData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(fontData_proto& a, fontData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(fontData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fontData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fontData_proto* New() const final {
    return new fontData_proto();
  }

  fontData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fontData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const fontData_proto& from);
  void MergeFrom(const fontData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fontData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fontData_proto";
  }
  protected:
  explicit fontData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlyphsFieldNumber = 3,
    kTextFontFieldNumber = 1,
    kNumGlyphFieldNumber = 2,
  };
  // repeated .glyphData_proto glyphs = 3;
  int glyphs_size() const;
  private:
  int _internal_glyphs_size() const;
  public:
  void clear_glyphs();
  ::glyphData_proto* mutable_glyphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glyphData_proto >*
      mutable_glyphs();
  private:
  const ::glyphData_proto& _internal_glyphs(int index) const;
  ::glyphData_proto* _internal_add_glyphs();
  public:
  const ::glyphData_proto& glyphs(int index) const;
  ::glyphData_proto* add_glyphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glyphData_proto >&
      glyphs() const;

  // optional .textureData_proto text_font = 1;
  bool has_text_font() const;
  private:
  bool _internal_has_text_font() const;
  public:
  void clear_text_font();
  const ::textureData_proto& text_font() const;
  PROTOBUF_MUST_USE_RESULT ::textureData_proto* release_text_font();
  ::textureData_proto* mutable_text_font();
  void set_allocated_text_font(::textureData_proto* text_font);
  private:
  const ::textureData_proto& _internal_text_font() const;
  ::textureData_proto* _internal_mutable_text_font();
  public:
  void unsafe_arena_set_allocated_text_font(
      ::textureData_proto* text_font);
  ::textureData_proto* unsafe_arena_release_text_font();

  // optional uint32 numGlyph = 2;
  bool has_numglyph() const;
  private:
  bool _internal_has_numglyph() const;
  public:
  void clear_numglyph();
  ::PROTOBUF_NAMESPACE_ID::uint32 numglyph() const;
  void set_numglyph(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numglyph() const;
  void _internal_set_numglyph(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fontData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glyphData_proto > glyphs_;
  ::textureData_proto* text_font_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numglyph_;
  friend struct ::TableStruct_fontData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// fontData_proto

// optional .textureData_proto text_font = 1;
inline bool fontData_proto::_internal_has_text_font() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || text_font_ != nullptr);
  return value;
}
inline bool fontData_proto::has_text_font() const {
  return _internal_has_text_font();
}
inline const ::textureData_proto& fontData_proto::_internal_text_font() const {
  const ::textureData_proto* p = text_font_;
  return p != nullptr ? *p : reinterpret_cast<const ::textureData_proto&>(
      ::_textureData_proto_default_instance_);
}
inline const ::textureData_proto& fontData_proto::text_font() const {
  // @@protoc_insertion_point(field_get:fontData_proto.text_font)
  return _internal_text_font();
}
inline void fontData_proto::unsafe_arena_set_allocated_text_font(
    ::textureData_proto* text_font) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_font_);
  }
  text_font_ = text_font;
  if (text_font) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fontData_proto.text_font)
}
inline ::textureData_proto* fontData_proto::release_text_font() {
  _has_bits_[0] &= ~0x00000001u;
  ::textureData_proto* temp = text_font_;
  text_font_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::textureData_proto* fontData_proto::unsafe_arena_release_text_font() {
  // @@protoc_insertion_point(field_release:fontData_proto.text_font)
  _has_bits_[0] &= ~0x00000001u;
  ::textureData_proto* temp = text_font_;
  text_font_ = nullptr;
  return temp;
}
inline ::textureData_proto* fontData_proto::_internal_mutable_text_font() {
  _has_bits_[0] |= 0x00000001u;
  if (text_font_ == nullptr) {
    auto* p = CreateMaybeMessage<::textureData_proto>(GetArenaForAllocation());
    text_font_ = p;
  }
  return text_font_;
}
inline ::textureData_proto* fontData_proto::mutable_text_font() {
  ::textureData_proto* _msg = _internal_mutable_text_font();
  // @@protoc_insertion_point(field_mutable:fontData_proto.text_font)
  return _msg;
}
inline void fontData_proto::set_allocated_text_font(::textureData_proto* text_font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_font_);
  }
  if (text_font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_font));
    if (message_arena != submessage_arena) {
      text_font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_font, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_font_ = text_font;
  // @@protoc_insertion_point(field_set_allocated:fontData_proto.text_font)
}

// optional uint32 numGlyph = 2;
inline bool fontData_proto::_internal_has_numglyph() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fontData_proto::has_numglyph() const {
  return _internal_has_numglyph();
}
inline void fontData_proto::clear_numglyph() {
  numglyph_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fontData_proto::_internal_numglyph() const {
  return numglyph_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fontData_proto::numglyph() const {
  // @@protoc_insertion_point(field_get:fontData_proto.numGlyph)
  return _internal_numglyph();
}
inline void fontData_proto::_internal_set_numglyph(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  numglyph_ = value;
}
inline void fontData_proto::set_numglyph(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numglyph(value);
  // @@protoc_insertion_point(field_set:fontData_proto.numGlyph)
}

// repeated .glyphData_proto glyphs = 3;
inline int fontData_proto::_internal_glyphs_size() const {
  return glyphs_.size();
}
inline int fontData_proto::glyphs_size() const {
  return _internal_glyphs_size();
}
inline ::glyphData_proto* fontData_proto::mutable_glyphs(int index) {
  // @@protoc_insertion_point(field_mutable:fontData_proto.glyphs)
  return glyphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glyphData_proto >*
fontData_proto::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_list:fontData_proto.glyphs)
  return &glyphs_;
}
inline const ::glyphData_proto& fontData_proto::_internal_glyphs(int index) const {
  return glyphs_.Get(index);
}
inline const ::glyphData_proto& fontData_proto::glyphs(int index) const {
  // @@protoc_insertion_point(field_get:fontData_proto.glyphs)
  return _internal_glyphs(index);
}
inline ::glyphData_proto* fontData_proto::_internal_add_glyphs() {
  return glyphs_.Add();
}
inline ::glyphData_proto* fontData_proto::add_glyphs() {
  ::glyphData_proto* _add = _internal_add_glyphs();
  // @@protoc_insertion_point(field_add:fontData_proto.glyphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glyphData_proto >&
fontData_proto::glyphs() const {
  // @@protoc_insertion_point(field_list:fontData_proto.glyphs)
  return glyphs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fontData_2eproto
