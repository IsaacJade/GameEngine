// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BoundingSphere.proto

#include "BoundingSphere.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr BoundingSphere_proto::BoundingSphere_proto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : podata_()
  , rad_(0){}
struct BoundingSphere_protoDefaultTypeInternal {
  constexpr BoundingSphere_protoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundingSphere_protoDefaultTypeInternal() {}
  union {
    BoundingSphere_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundingSphere_protoDefaultTypeInternal _BoundingSphere_proto_default_instance_;

// ===================================================================

class BoundingSphere_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundingSphere_proto>()._has_bits_);
  static void set_has_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BoundingSphere_proto::BoundingSphere_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  podata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BoundingSphere_proto)
}
BoundingSphere_proto::BoundingSphere_proto(const BoundingSphere_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      podata_(from.podata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  rad_ = from.rad_;
  // @@protoc_insertion_point(copy_constructor:BoundingSphere_proto)
}

inline void BoundingSphere_proto::SharedCtor() {
rad_ = 0;
}

BoundingSphere_proto::~BoundingSphere_proto() {
  // @@protoc_insertion_point(destructor:BoundingSphere_proto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void BoundingSphere_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoundingSphere_proto::ArenaDtor(void* object) {
  BoundingSphere_proto* _this = reinterpret_cast< BoundingSphere_proto* >(object);
  (void)_this;
}
void BoundingSphere_proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingSphere_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundingSphere_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:BoundingSphere_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  podata_.Clear();
  rad_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BoundingSphere_proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float poData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_podata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_podata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_rad(&has_bits);
          rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingSphere_proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoundingSphere_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float poData = 1;
  if (this->_internal_podata_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_podata(), target);
  }

  // optional float rad = 2;
  if (_internal_has_rad()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoundingSphere_proto)
  return target;
}

size_t BoundingSphere_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoundingSphere_proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float poData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_podata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // optional float rad = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingSphere_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoundingSphere_proto*>(
      &from));
}

void BoundingSphere_proto::MergeFrom(const BoundingSphere_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoundingSphere_proto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  podata_.MergeFrom(from.podata_);
  if (from._internal_has_rad()) {
    _internal_set_rad(from._internal_rad());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoundingSphere_proto::CopyFrom(const BoundingSphere_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoundingSphere_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingSphere_proto::IsInitialized() const {
  return true;
}

void BoundingSphere_proto::InternalSwap(BoundingSphere_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  podata_.InternalSwap(&other->podata_);
  swap(rad_, other->rad_);
}

std::string BoundingSphere_proto::GetTypeName() const {
  return "BoundingSphere_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BoundingSphere_proto* Arena::CreateMaybeMessage< ::BoundingSphere_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BoundingSphere_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
