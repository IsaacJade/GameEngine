// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skelData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class skelData_proto;
struct skelData_protoDefaultTypeInternal;
extern skelData_protoDefaultTypeInternal _skelData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::skelData_proto* Arena::CreateMaybeMessage<::skelData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class skelData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:skelData_proto) */ {
 public:
  inline skelData_proto() : skelData_proto(nullptr) {}
  ~skelData_proto() override;
  explicit constexpr skelData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  skelData_proto(const skelData_proto& from);
  skelData_proto(skelData_proto&& from) noexcept
    : skelData_proto() {
    *this = ::std::move(from);
  }

  inline skelData_proto& operator=(const skelData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline skelData_proto& operator=(skelData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const skelData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const skelData_proto* internal_default_instance() {
    return reinterpret_cast<const skelData_proto*>(
               &_skelData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(skelData_proto& a, skelData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(skelData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(skelData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skelData_proto* New() const final {
    return new skelData_proto();
  }

  skelData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skelData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const skelData_proto& from);
  void MergeFrom(const skelData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(skelData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skelData_proto";
  }
  protected:
  explicit skelData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 2,
    kParentNameFieldNumber = 4,
    kNodeIndexFieldNumber = 1,
    kParentIndexFieldNumber = 3,
  };
  // optional bytes nodeName = 2;
  bool has_nodename() const;
  private:
  bool _internal_has_nodename() const;
  public:
  void clear_nodename();
  const std::string& nodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodename();
  PROTOBUF_MUST_USE_RESULT std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // optional bytes parentName = 4;
  bool has_parentname() const;
  private:
  bool _internal_has_parentname() const;
  public:
  void clear_parentname();
  const std::string& parentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentname();
  PROTOBUF_MUST_USE_RESULT std::string* release_parentname();
  void set_allocated_parentname(std::string* parentname);
  private:
  const std::string& _internal_parentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentname(const std::string& value);
  std::string* _internal_mutable_parentname();
  public:

  // optional uint32 nodeIndex = 1;
  bool has_nodeindex() const;
  private:
  bool _internal_has_nodeindex() const;
  public:
  void clear_nodeindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeindex() const;
  void set_nodeindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nodeindex() const;
  void _internal_set_nodeindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 parentIndex = 3;
  bool has_parentindex() const;
  private:
  bool _internal_has_parentindex() const;
  public:
  void clear_parentindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 parentindex() const;
  void set_parentindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parentindex() const;
  void _internal_set_parentindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:skelData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parentindex_;
  friend struct ::TableStruct_skelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// skelData_proto

// optional uint32 nodeIndex = 1;
inline bool skelData_proto::_internal_has_nodeindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool skelData_proto::has_nodeindex() const {
  return _internal_has_nodeindex();
}
inline void skelData_proto::clear_nodeindex() {
  nodeindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skelData_proto::_internal_nodeindex() const {
  return nodeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skelData_proto::nodeindex() const {
  // @@protoc_insertion_point(field_get:skelData_proto.nodeIndex)
  return _internal_nodeindex();
}
inline void skelData_proto::_internal_set_nodeindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nodeindex_ = value;
}
inline void skelData_proto::set_nodeindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nodeindex(value);
  // @@protoc_insertion_point(field_set:skelData_proto.nodeIndex)
}

// optional bytes nodeName = 2;
inline bool skelData_proto::_internal_has_nodename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool skelData_proto::has_nodename() const {
  return _internal_has_nodename();
}
inline void skelData_proto::clear_nodename() {
  nodename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& skelData_proto::nodename() const {
  // @@protoc_insertion_point(field_get:skelData_proto.nodeName)
  return _internal_nodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void skelData_proto::set_nodename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nodename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skelData_proto.nodeName)
}
inline std::string* skelData_proto::mutable_nodename() {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:skelData_proto.nodeName)
  return _s;
}
inline const std::string& skelData_proto::_internal_nodename() const {
  return nodename_.Get();
}
inline void skelData_proto::_internal_set_nodename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* skelData_proto::_internal_mutable_nodename() {
  _has_bits_[0] |= 0x00000001u;
  return nodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* skelData_proto::release_nodename() {
  // @@protoc_insertion_point(field_release:skelData_proto.nodeName)
  if (!_internal_has_nodename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nodename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void skelData_proto::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:skelData_proto.nodeName)
}

// optional uint32 parentIndex = 3;
inline bool skelData_proto::_internal_has_parentindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool skelData_proto::has_parentindex() const {
  return _internal_has_parentindex();
}
inline void skelData_proto::clear_parentindex() {
  parentindex_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skelData_proto::_internal_parentindex() const {
  return parentindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skelData_proto::parentindex() const {
  // @@protoc_insertion_point(field_get:skelData_proto.parentIndex)
  return _internal_parentindex();
}
inline void skelData_proto::_internal_set_parentindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  parentindex_ = value;
}
inline void skelData_proto::set_parentindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parentindex(value);
  // @@protoc_insertion_point(field_set:skelData_proto.parentIndex)
}

// optional bytes parentName = 4;
inline bool skelData_proto::_internal_has_parentname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool skelData_proto::has_parentname() const {
  return _internal_has_parentname();
}
inline void skelData_proto::clear_parentname() {
  parentname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& skelData_proto::parentname() const {
  // @@protoc_insertion_point(field_get:skelData_proto.parentName)
  return _internal_parentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void skelData_proto::set_parentname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 parentname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skelData_proto.parentName)
}
inline std::string* skelData_proto::mutable_parentname() {
  std::string* _s = _internal_mutable_parentname();
  // @@protoc_insertion_point(field_mutable:skelData_proto.parentName)
  return _s;
}
inline const std::string& skelData_proto::_internal_parentname() const {
  return parentname_.Get();
}
inline void skelData_proto::_internal_set_parentname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* skelData_proto::_internal_mutable_parentname() {
  _has_bits_[0] |= 0x00000002u;
  return parentname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* skelData_proto::release_parentname() {
  // @@protoc_insertion_point(field_release:skelData_proto.parentName)
  if (!_internal_has_parentname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parentname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void skelData_proto::set_allocated_parentname(std::string* parentname) {
  if (parentname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:skelData_proto.parentName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skelData_2eproto
