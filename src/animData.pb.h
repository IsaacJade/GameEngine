// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_animData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_animData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_animData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_animData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class animData_proto;
struct animData_protoDefaultTypeInternal;
extern animData_protoDefaultTypeInternal _animData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::animData_proto* Arena::CreateMaybeMessage<::animData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class animData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:animData_proto) */ {
 public:
  inline animData_proto() : animData_proto(nullptr) {}
  ~animData_proto() override;
  explicit constexpr animData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  animData_proto(const animData_proto& from);
  animData_proto(animData_proto&& from) noexcept
    : animData_proto() {
    *this = ::std::move(from);
  }

  inline animData_proto& operator=(const animData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline animData_proto& operator=(animData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const animData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const animData_proto* internal_default_instance() {
    return reinterpret_cast<const animData_proto*>(
               &_animData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(animData_proto& a, animData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(animData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(animData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline animData_proto* New() const final {
    return new animData_proto();
  }

  animData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<animData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const animData_proto& from);
  void MergeFrom(const animData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(animData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animData_proto";
  }
  protected:
  explicit animData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoneFieldNumber = 3,
    kFrameIndexFieldNumber = 1,
    kTimeFieldNumber = 2,
    kBoneCountFieldNumber = 4,
  };
  // repeated float bone = 3;
  int bone_size() const;
  private:
  int _internal_bone_size() const;
  public:
  void clear_bone();
  private:
  float _internal_bone(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bone() const;
  void _internal_add_bone(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bone();
  public:
  float bone(int index) const;
  void set_bone(int index, float value);
  void add_bone(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bone() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bone();

  // optional uint32 frameIndex = 1;
  bool has_frameindex() const;
  private:
  bool _internal_has_frameindex() const;
  public:
  void clear_frameindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 frameindex() const;
  void set_frameindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frameindex() const;
  void _internal_set_frameindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // optional uint32 boneCount = 4;
  bool has_bonecount() const;
  private:
  bool _internal_has_bonecount() const;
  public:
  void clear_bonecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 bonecount() const;
  void set_bonecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bonecount() const;
  void _internal_set_bonecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:animData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bone_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frameindex_;
  float time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bonecount_;
  friend struct ::TableStruct_animData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// animData_proto

// optional uint32 frameIndex = 1;
inline bool animData_proto::_internal_has_frameindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool animData_proto::has_frameindex() const {
  return _internal_has_frameindex();
}
inline void animData_proto::clear_frameindex() {
  frameindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animData_proto::_internal_frameindex() const {
  return frameindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animData_proto::frameindex() const {
  // @@protoc_insertion_point(field_get:animData_proto.frameIndex)
  return _internal_frameindex();
}
inline void animData_proto::_internal_set_frameindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  frameindex_ = value;
}
inline void animData_proto::set_frameindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frameindex(value);
  // @@protoc_insertion_point(field_set:animData_proto.frameIndex)
}

// optional float time = 2;
inline bool animData_proto::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool animData_proto::has_time() const {
  return _internal_has_time();
}
inline void animData_proto::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float animData_proto::_internal_time() const {
  return time_;
}
inline float animData_proto::time() const {
  // @@protoc_insertion_point(field_get:animData_proto.time)
  return _internal_time();
}
inline void animData_proto::_internal_set_time(float value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void animData_proto::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:animData_proto.time)
}

// repeated float bone = 3;
inline int animData_proto::_internal_bone_size() const {
  return bone_.size();
}
inline int animData_proto::bone_size() const {
  return _internal_bone_size();
}
inline void animData_proto::clear_bone() {
  bone_.Clear();
}
inline float animData_proto::_internal_bone(int index) const {
  return bone_.Get(index);
}
inline float animData_proto::bone(int index) const {
  // @@protoc_insertion_point(field_get:animData_proto.bone)
  return _internal_bone(index);
}
inline void animData_proto::set_bone(int index, float value) {
  bone_.Set(index, value);
  // @@protoc_insertion_point(field_set:animData_proto.bone)
}
inline void animData_proto::_internal_add_bone(float value) {
  bone_.Add(value);
}
inline void animData_proto::add_bone(float value) {
  _internal_add_bone(value);
  // @@protoc_insertion_point(field_add:animData_proto.bone)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
animData_proto::_internal_bone() const {
  return bone_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
animData_proto::bone() const {
  // @@protoc_insertion_point(field_list:animData_proto.bone)
  return _internal_bone();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
animData_proto::_internal_mutable_bone() {
  return &bone_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
animData_proto::mutable_bone() {
  // @@protoc_insertion_point(field_mutable_list:animData_proto.bone)
  return _internal_mutable_bone();
}

// optional uint32 boneCount = 4;
inline bool animData_proto::_internal_has_bonecount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool animData_proto::has_bonecount() const {
  return _internal_has_bonecount();
}
inline void animData_proto::clear_bonecount() {
  bonecount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animData_proto::_internal_bonecount() const {
  return bonecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animData_proto::bonecount() const {
  // @@protoc_insertion_point(field_get:animData_proto.boneCount)
  return _internal_bonecount();
}
inline void animData_proto::_internal_set_bonecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bonecount_ = value;
}
inline void animData_proto::set_bonecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bonecount(value);
  // @@protoc_insertion_point(field_set:animData_proto.boneCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_animData_2eproto
